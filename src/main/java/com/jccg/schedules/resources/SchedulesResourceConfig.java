/**
 * 
 */
package com.jccg.schedules.resources;

import java.util.Set;
import javax.ws.rs.ApplicationPath;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.glassfish.jersey.server.ResourceConfig;
/**
 *
 * @author Cristian Gerardo Jaramillo Cruz
 */
@ApplicationPath("api")
public class SchedulesResourceConfig extends ResourceConfig
{
    public SchedulesResourceConfig()
    {
        LOGGER.info("Registro del resource UserResource");
        register(com.jccg.schedules.resources.UserResource.class);
        LOGGER.info("Registro del resource CategoryResource");
        register(com.jccg.schedules.resources.CategoryResource.class);
        LOGGER.info("Registro del filtro LoggingFilter");
        register(org.glassfish.jersey.filter.LoggingFilter.class);
        LOGGER.info("Registro del response filtro CORSResponseFilter");
        register(com.jccg.schedules.resources.filter.response.CORSResponseFilter.class);
        LOGGER.info("Registro del provider DataNotFoundExceptionMapper");
        register(com.jccg.schedules.resources.exception.provider.DataNotFoundExceptionMapper.class);
    }
    
    private static final Logger LOGGER = LogManager.getLogger(SchedulesResourceConfig.class);

    @Override
    public Set<Class<?>> getClasses() {
        Set<Class<?>> resources = new java.util.HashSet<Class<?>>();
        addRestResourceClasses(resources);
        return resources;
    }

    /**
     * Do not modify addRestResourceClasses() method.
     * It is automatically re-generated by NetBeans REST support to populate
     * given list with all resources defined in the project.
     */
    private void addRestResourceClasses(Set<Class<?>> resources) {
        resources.add(com.jccg.schedules.resources.CategoryResource.class);
        resources.add(com.jccg.schedules.resources.UserResource.class);
        resources.add(com.jccg.schedules.resources.exception.provider.DataNotFoundExceptionMapper.class);
    }
    
}
